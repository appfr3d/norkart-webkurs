{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["LayerSelect","borderRadius","marginTop","marginBottom","width","LabelStyle","fontSize","margin","padding","color","Header","mapStyle","setMapStyle","setFlyTo","className","style","name","onChange","event","target","value","onClick","Math","random","styles","height","position","MapboxGLMap","flyTo","useState","map","setMap","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","initializeMap","setStyle","essential","ref","el","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAGMA,EAAc,CAClBC,aAAc,MACdC,UAAW,MACXC,aAAc,MACdC,MAAO,SAGHC,EAAa,CACjBC,SAAU,OACVC,OAAQ,MACRC,QAAS,MACTC,MAAO,SAgCMC,EA7BA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvC,OACE,yBAAKC,UAAU,cACb,yBAAKC,MAAOV,GAAZ,oBACA,4BACEW,KAAK,WACLD,MAAOf,EACPiB,SAAU,SAACC,GACTN,EAAYM,EAAMC,OAAOC,QAE3BA,MAAOT,GAEP,4BAAQS,MAAM,eAAd,WACA,4BAAQA,MAAM,aAAd,SACA,4BAAQA,MAAM,YAAd,QACA,4BAAQA,MAAM,gBAAd,YACA,4BAAQA,MAAM,gBAAd,cAEF,4BACEC,QAAS,WACPR,EAAS,CAAC,QAA0B,GAAhBS,KAAKC,SAAe,OAAyB,GAAhBD,KAAKC,aAF1D,sC,gBC/BAC,G,MAAS,CACbpB,MAAO,OACPqB,OAAQ,cACRC,SAAU,aAyCGC,EAtCK,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,SAAUiB,EAAY,EAAZA,MAAY,EACrBC,mBAAS,MADY,mBACpCC,EADoC,KAC/BC,EAD+B,KAErCC,EAAeC,iBAAO,MAiC5B,OA/BAC,qBAAU,WACRC,IAASC,YAAcC,yFAelBP,GAdiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACzBF,EAAM,IAAIK,IAASG,IAAI,CAC3BC,UAAWP,EAAaQ,QACxBzB,MAAO,qCACP0B,OAAQ,CAAC,UAAW,WACpBC,KAAM,KAGRZ,EAAIa,GAAG,QAAQ,WACbZ,EAAOD,GACPA,EAAIc,YAIEC,CAAc,CAAEd,SAAQC,mBACjC,CAACF,IAEJI,qBAAU,WACJJ,GACFA,EAAIgB,SAAS,0BAA4BnC,KAE1C,CAACmB,EAAKnB,IAETuB,qBAAU,WACJJ,GACFA,EAAIF,MAAM,CAAEa,OAAQb,EAAOmB,WAAW,MAEvC,CAACnB,EAAOE,IAEJ,yBAAKkB,IAAK,SAACC,GAAD,OAASjB,EAAaQ,QAAUS,GAAKlC,MAAOS,KCzCzDA,EAAS,CACb0B,SAAU,UAeGC,MAZf,WAAgB,IAAD,EACmBtB,mBAAS,eAD5B,mBACNlB,EADM,KACIC,EADJ,OAEaiB,mBAAS,CAAC,UAAW,YAFlC,mBAEND,EAFM,KAECf,EAFD,KAIb,OACE,yBAAKE,MAAOS,GACV,kBAAC,EAAD,CAAQb,SAAUA,EAAUC,YAAaA,EAAaC,SAAUA,IAChE,kBAAC,EAAD,CAAaF,SAAUA,EAAUiB,MAAOA,MCH1BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.daf23ea3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst LayerSelect = {\r\n  borderRadius: \"5px\",\r\n  marginTop: \"2px\",\r\n  marginBottom: \"2px\",\r\n  width: \"100px\",\r\n};\r\n\r\nconst LabelStyle = {\r\n  fontSize: \"12px\",\r\n  margin: \"0px\",\r\n  padding: \"0px\",\r\n  color: \"white\",\r\n};\r\n\r\nconst Header = ({ mapStyle, setMapStyle, setFlyTo }) => {\r\n  return (\r\n    <div className=\"LayerShift\">\r\n      <div style={LabelStyle}>Change Map Style</div>\r\n      <select\r\n        name=\"mapStyle\"\r\n        style={LayerSelect}\r\n        onChange={(event) => {\r\n          setMapStyle(event.target.value);\r\n        }}\r\n        value={mapStyle}\r\n      >\r\n        <option value=\"streets-v11\">Streets</option>\r\n        <option value=\"light-v10\">Light</option>\r\n        <option value=\"dark-v10\">Dark</option>\r\n        <option value=\"outdoors-v11\">Outdoors</option>\r\n        <option value=\"satellite-v9\">Satellite</option>\r\n      </select>\r\n      <button\r\n        onClick={() => {\r\n          setFlyTo([10.4088 + Math.random() * 20, 63.422 + Math.random() * 20]);\r\n        }}\r\n      >\r\n        Fly to your next vacation place!\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh)\",\r\n  position: \"absolute\",\r\n};\r\n\r\nconst MapboxGLMap = ({ mapStyle, flyTo }) => {\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [10.408773, 63.422091],\r\n        zoom: 10,\r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        map.resize();\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  }, [map]);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      map.setStyle(\"mapbox://styles/mapbox/\" + mapStyle);\r\n    }\r\n  }, [map, mapStyle]);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      map.flyTo({ center: flyTo, essential: true });\r\n    }\r\n  }, [flyTo, map]);\r\n\r\n  return <div ref={(el) => (mapContainer.current = el)} style={styles} />;\r\n};\r\n\r\nexport default MapboxGLMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow: \"hidden\",\r\n};\r\n\r\nfunction App() {\r\n  const [mapStyle, setMapStyle] = useState(\"streets-v11\");\r\n  const [flyTo, setFlyTo] = useState([10.408773, 63.422091]);\r\n\r\n  return (\r\n    <div style={styles}>\r\n      <Header mapStyle={mapStyle} setMapStyle={setMapStyle} setFlyTo={setFlyTo} />\r\n      <MapboxGLMap mapStyle={mapStyle} flyTo={flyTo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}